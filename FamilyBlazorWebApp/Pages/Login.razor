@layout LoginLayout
@page "/Login"
@using Models
@using Data
@using Authentication
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <div class="row  page-background-class justify-content-center align-items-center">
            <div class="col-4 overflow-auto">
                <div class="loginBox">
                    <div class="form-group">
                        <h1 id="WelcomeMessage">Welcome to Family Blazor</h1>
                    </div>

                    <br/>

                    <div class="form-group inputFields">
                        <input type="text" placeholder="User name" required="required" size="60" @bind-value="userName"/>
                    </div>

                    <br/>

                    <div class="form-group inputFields">
                        <input type="password" placeholder="password" required="required" size="60" @bind-value="password"/>
                    </div>

                    <div class="form-group">
                        @errorMessage
                    </div>

                    <div class="form-group loginActions">
                        <button class="btn btn-outline-dark" id="loginButton" type="submit" size="40" @onclick="PerformLogin">Login</button>
                        <button class="btn btn-outline-dark" id="CreatButton" type="submit" size="40" @onclick="ToCreateUserPage">Create User</button>
                    </div>
                    <div class="form-group" id="loginActions">
                        <p>Or<br/><a href="Adults">continue as a guest</a></p>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="form-group">
            <button class="btn btn-outline-dark" type="submit" @onclick="PerformLogout">Log out</button>
        </div>
    </Authorized>
</AuthorizeView>

@code 
{
    private string userName;
    private string password;
    private string errorMessage;

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(userName, password);
            NavigationManager.NavigateTo("/Adults");
            userName = "";
            password = "";
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        userName = "";
        password = "";
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
        }
    }
    
    private void ToCreateUserPage()
    {
        NavigationManager.NavigateTo("/CreateUser");
    }
}